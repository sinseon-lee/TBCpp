<2021.08.19>

[0.0 C++ 꼭 공부해야 할까?]

* C++을 배워야 하는 이유
- 피카소도 옛날에는 어려운 그림들 그렸음
- 기본이 중요하다.
- 기본이 중요한 걸 아는데도 하지 않느 이유는 힘든 구간이 있음을 알고 있기 때문에
- 피카소 : 좋은 예술가는 베낀다, 위대한 예술가는 훔친다. (남의 것을 자기것으로 만들어야 한다)

* 공부 방법
0. 올바른 타이핑 방법을 연습한다.
1. 간단한 개념을 이해한다.
2. 예제를 따라 해본다.
3. 문제가 생기면 해결한다.
4. 예제를 내 맘대로 바꿔본다.

=> 나중에 다른 언어를 배울 때는 간단하게 배운 후 핵심으로 바로 찔러 들어갈 수 있음. C++를 배웠을 때만 이렇게 할 수 있음

[0.1 프로그래밍 언어란]

* 컴파일러 언어
고수준 언어로 쓰여진 코드 -> 컴파일러 -> 실행파일 -> 중앙처리장치 -> 실행 결과
C, C++은 컴파일러 언어

* 터프리터 언어도 있음 코드 말고 스크립트라고 부름
고수준 언어로 쓰여진 스크립트 -> 인터프리터 -> CPU -> 실행 결과
파이썬

* 컴파일러 언어 vs 인터프리터 언어

* 이식성
- 컴파일러 언어로 작성된 코드는 OS(윈도우즈, 리눅스) 마다 컴파일러가 다름. 문법도 조금 다를 수 있음. 실행파일도 달라서 호환되지 않음
- 자바 사례 : 소스 파일을 컴파일하면 바이트코드가 생성됨. 윈도우즈, 리눅스의 각 가상 기계로 컴파일해서 각 OS 별로 실행 결과가 나옴

[0.2] C, C++ 언어 소개

Dennis Ritchie : 어샘블리로 개발하기 너무 힘들어서 C를 개발
- 책 : The C Programming Language

Biarne Stroustrup : C++ 개발 70년대 후반. C를 확장해서 OOP 개념 도입.

C/C++ 언어의 설계 철학 : 프로그래머를 믿어라.
- 실제 세계에서 쓸모가 있어야 한다.
- 프로그래머가 스스로 스타일을 선택할 수 있어야 한다.
- 유용한 기능을 추가하는 것이 오용보다 더 중요하다.
- 프로그래머의 의도를 알 수 없다면 스스로를 명시하게 한다.
- C++ 아래에 다른 언어 없다. (어셈블리어는 예외)

파이썬도 C++로 만들어짐

[0.3] 프로그래밍 과정 소개

1단계 : 풀어야 할 문제를 정의한다
2단계 : 해법을 설계한다
3단계 : 해법을 구현하는 프로그램을 작성한다write
4단계 : 프로그램을 컴파일한다compile
- g++ -c file1.cpp file2.cpp file3.cpp
	=> 각 cpp 파일 별로 .o 파일이 생성됨
5단계 : 오브젝트object 파일들을 링킹linking한다
- .o 파일들을 합친다
6단계 : 테스트해보고 문제가 있으면 고친다debug
- 옛날에는 종이에 구멍을 뚫어서 코딩을 했는데, 그 구멍을 벌레가 막고 있었던 거에서 유래

[0.4] 통합개발환경의 기본적인 사용법 - 윈도우즈 비쥬얼 스튜디오

[0.4.1] 통합개발환경의 기본적인 사용법 - 윈도우즈 리눅스 코드블럭스

[0.4.2] 비쥬얼 스튜디오 솔루션, 프로젝트 관리

[0.5] 코딩하다 막혔을 때는?
- 당황하지도 말고 분노하지도 말자.
- IDE의 도움을 받는다. console을 읽자.
- 검색엔진의 도움을 받는다. (구글)
- 그래도 안되면 커뮤니티의 도움을 받는다.



<2021.08.19>

[1.1] 프로그램의 구조

[1.2] 주석

[1.3] 변수

객체objects : 객채라는게 메모리에 담겨있음
변수variables : 메모리에 담겨있는 객체 주소의 다른 이름
L-value, R-value : 메모리 주소를 프로그래머가 직접 접근할 수 있느냐 없느냐

